can you come up with a json schema for this page (focusing on the single page at the forefront)

and then extract it into that schema.

create a prompt for an ocr model to do the same (prompt can be simple, just needs to spec json, coarse but crisp schema / terse)

e.g. xml prompt
Focus only on the main page present. Extract as xml
schema
root has (page[number:int] has header, content)

INSTRUCTIONS

think through understanding what image is before you. put your thoughts ENTIRELY in <thk></thk> tokens. DO NOT START THE PRIMARY TASK until this is done. And do not leak any thoughts into the primary task. This is your scratch pad. Map out the problem space here until you are ready to commit to the task.
1a) use your scratch pad to think about mapping the image to the task. start high level, and work down to more specifics before you finish ruminating
1b) make your scratchpad work for the task. it is not a place for just "oh cool look there's a pic"
Once you are done ruminating. Start the primary OCR task.


---- v2 better?

CORE TASK
Focus only on the main page present. Extract as xml
schema
root has (page[number:int] has header, paragraph[])

INSTRUCTIONS
You are a visual reasoning assistant. For each problem, solve it using **at least two distinct reasoning strategies**. Show your thinking step-by-step for each approach (encapsulated in <thk></thk> xml), then compare and validate the results. Use clear visual terms (e.g., shapes, colors, sizes, spatial relationships, sentence, paragraph, layout structure etc).

think through understanding what image is before you. put your thoughts ENTIRELY in <thk></thk> tokens. DO NOT START THE PRIMARY TASK until this is done. And do not leak any thoughts into the primary task. This is your scratch pad. Map out the problem space here until you are ready to commit to the task.

use your scratch pad to think about mapping the image to the task. start high level, and work down to more specifics before you finish ruminating. Do not proceed from thinking until you are EXTREMELY confident in the execution of the task.

Be sure to decompose the problem both visually and logically! Below are some examples of visual problem decomposition.
---
Be

**Example 1: Decomposition by Spatial Regions**
Q: "How many triangles are in the image?"

A:
**Strategy 1 (Grid Partitioning):**
1. Divide the image into 3 horizontal strips.
2. Count triangles in the top strip: 2 small triangles.
3. Middle strip has 1 large triangle overlapping 2 smaller ones → count unique triangles: 3.
4. Bottom strip has 4 triangles in a grid.
5. Total: 2 + 3 + 4 = **9 triangles**.

**Strategy 2 (Shape Hierarchy):**
1. Identify all individual triangles: 5 small triangles.
2. Find compound triangles formed by combining smaller ones: 4 overlapping ones.
3. Total: 5 + 4 = **9 triangles**.

**Validation:** Both methods agree. Checked by manually re-counting in the image.

---

**Example 2: Attribute Filtering**
Q: "What is the shape of the largest red object in the image?"

A:
**Strategy 1 (Color First):**
1. Isolate all red objects.
2. Measure their areas: Object A (circle, area=25 units), Object B (square, area=30 units).
3. Largest red object is the **square**.

**Strategy 2 (Size First):**
1. Find the largest object in the image (regardless of color): It’s a blue rectangle (area=50 units).
2. Since it’s not red, filter to next largest red objects → same result as Strategy 1: **square**.

**Validation:** Both strategies agree. Verified by cross-referencing color and size attributes.

---

**Example 3: Spatial Relationships**
Q: "Are all blue squares located above any green circles?"

A:
**Strategy 1 (Coordinate Mapping):**
1. Assign coordinates to objects.
2. Blue squares are at (x=3,y=5) and (x=6,y=7).
3. Green circles are at (x=2,y=2) and (x=4,y=1).
4. All blue squares have y-coordinates > green circles → **Yes**.

---

**Example 4: Textual Spatial Relationships**
Q: "How many paragraphs are there in this document?"

A:
**Strategy 2 (Visual Inspection):**
1. I see a space, an open space, before the work "Trap." It indents from the line of text composing a margin. That must be paragraph 1?
....
4. Yes, okay reviewing it again those are the two paragraphs, as i do not see any other text that defers from the margin, and the initial text of the page is not lowercased (indicating a continuation).

**Strategy 2 (Visual Inspection):**
1. Look for blue squares in the lower half of the image.
2. None found → implies they’re all above the middle.
3. Green circles are in the lower third → **Yes**.

**Validation:** Both methods confirm the answer. Checked with image zoom.

**COUNTEREXAMPLE (lacks clear landmarks)**
I will use perform a textual Content Analysis

Header: Clearly separated from the body text.
Paragraphs: Multiple paragraphs, each discussing concepts like fear, emotional wounds, and societal laws.
Page Number: Small and at the bottom right corner.
---
REMEMBER
think through understanding what image is before you. put your thoughts ENTIRELY in <thk></thk> tokens. DO NOT START THE PRIMARY TASK until this is done. And do not leak any thoughts into the primary task. This is your scratch pad. Map out the problem space here until you are ready to commit to the task.

Leave yourself SPECIFIC breadcrumbs, visual landmarks, start, end, top, bottom, as you go etc so you can incrementally map out and solve the problem space! This is critical to your reasoning!

Once you are done ruminating. Start the primary OCR task (CORE TASK)


---- V3 BEST

**CORE TASK**

Focus only on the main page present. Extract as XML with the following schema:
Root has (page[number: int] which has header, paragraph[]).

**INSTRUCTIONS**

You are a visual reasoning assistant. For each problem, solve it using **at least two distinct reasoning strategies**. For added robustness, aim to generate at least three separate lines of thought in your scratchpad. Show your thinking step-by-step for each approach, encapsulated within `<thk></thk>` XML tags, then compare and validate the results. Emphasize clear visual terms such as shapes, colors, sizes, spatial relationships, sentences, paragraphs, layout structures, etc.

**Pre-Task Guidelines:**
- **Understand Before Doing:** Fully utilize your scratchpad, embedded in `<thk></thk>`, to explore and map out the visual problem space.
- **Do Not Rush:** Avoid starting the CORE TASK execution until you have absolute confidence in the outlined approaches.
- **Maintain Separation:** Ensure an absolute separation between the thinking process and the primary task. Do not leak thoughts from your scratchpad into the CORE TASK prematurely.

**Visual and Logical Decomposition:**
- Start with a high-level understanding and progressively move towards specific details.
- Use stratification such as the ODI approach (Overview, Details, Interconnections).
- Identify general layout patterns (grids, lists, sections) and standout visual attributes (color contrasts, shape dominance).
- Analyze spatial relationships: proximity, alignment, visual centers, etc.

**Encouragement for Thought Diversity:**
- Encourage visual exploration from multiple angles or perspectives.
- Generate multiple thought threads to ensure diverse reasoning strategies.
- Example strategies might include grid partitioning, shape hierarchy, color-based sorting, or size filtering.

**Validation and Verification:**
- Validate each strategy through cross-verification with other strategies.
- Document counterexamples or discrepancies that arise.
- Use visual checks such as zooming, reorientation, or color contrast confirmation to support findings.

**Introducing Anchors and Labels:**
- Implement verbal/visual anchors like "top-left-corner," or "adjacent to header" for consistent navigation.
- Create a mental map that aligns with these anchors to ensure clarity in analysis.

**Enrichment and Precision in Language:**
- Use descriptive visual language: terms such as "dominant color," "converging lines," or "right-aligned text."
- Label elements and relationships explicitly to solidify understanding.

**Post-Reflection:**
- As you finalize your reasoning in <thk></thk>, prepare a brief overview of your final approach and any critical insights. Only then proceed to execute the CORE TASK with confidence.

**REMEMBER:**
The separation between <thk> thinking and execution (CORE TASK) must be absolute. Ensure that your CoT is rich, structured, and validated before transitioning to task completion.
